author: David Nebauer
core-version: >=5.1.18
created: 20190514100102558
description: Insert table defined in a data tiddler
list: readme usage dependencies credits license
modified: 20190514100102558
plugin-type: plugin
title: $:/plugins/.dtn/insert-table
type: application/json
version: 0.0.5

{
    "tiddlers": {
        "$:/config/plugin/.dtn/insert-table/style-sets": {
            "text": "This tiddler is used by the <<.tid \".dtn/insert-table\">> plugin to define sets of css classes used to style the tables created by the <<.var \"insert-table\">> macro.\n\nEach set of css classes is defined in a field of this tiddler. The field name is the name of the class set, and the value of the field is a string containing a space-delimited list of css classes to apply to the table. For example, the field <<.field \"borderless-orange\">> may be set to <<.value \"table-borderless table-striped-row thead-orange caption-top\">>.\n\nThe field name is used as the <<.var \"classes\">> parameter of the <<.var \"insert-table\">> macro. Importantly, each class in the set will be added to the \"class\" attribute of the \"table\" element. For example, the macro call:\n\n```tid\n<$macrocall $name=\"insert-table\" source=\"MyTableSource\" classes={{$:/config/plugin/.dtn/insert-table/style-sets!!borderless-orange}}/>\n```\n\nresults in the following html table element:\n\n```html\n<table class=\"table-borderless table-striped-row thead-orange caption-top\">\n```\n\nThe css classes must be designed for use in the <<.field \"class\">> attributes of the <<.field \"table\">> html element. You can avoid having to design your own table-specific css classes by using those provided in the [[Shiraz|https://kookma.github.io/Shiraz/#%24%3A%2Fplugins%2F.mr%2Fshiraz]] plugin. The css classes used in the example above are all shiraz css classes.",
            "bag": "default",
            "revision": "0",
            "type": "text/vnd.tiddlywiki",
            "title": "$:/config/plugin/.dtn/insert-table/style-sets",
            "modified": "20190424101421833",
            "created": "20190314092216872",
            "borderless-orange": "table-borderless table-striped-row thead-orange caption-top"
        },
        "$:/plugins/.dtn/insert-table/credits": {
            "text": "; Stephan Hradek\n: <div>This plugin uses an internal macro based on the \"uuid\" macro by Stephan Hradek ([[Skeeve|https://github.com/Skeeve]]) which can be obtained from his [[Skeeve's TiddlyStuff|http://tiddlystuff.tiddlyspot.com/#UUIDmacro]] site.",
            "bag": "default",
            "revision": "0",
            "type": "text/vnd.tiddlywiki",
            "title": "$:/plugins/.dtn/insert-table/credits",
            "tags": "",
            "modified": "20190509121158569",
            "created": "20190509105112242"
        },
        "$:/plugins/.dtn/insert-table/dependencies": {
            "text": "; Developer feature enabling lists with duplicate values\n: <div>\n\nThis plugin uses an internal drop-in replacement for the [[enlist|enlist Operator]] filter operator which is identical except that duplicate items are retained rather than discarded.\n\nThe replacement filter operator relies on a poorly documented feature of the <<.op \"$tw.utils.parseStringArray()\">> macro as defined in the <<.var boot/boot.js>> file. According to the release notes for Tiddlywiki version 5.1.18 ([[local|Release 5.1.18]], [[web|https://tiddlywiki.com/#Release%205.1.18]]), the //Developer Bug Fixes and Improvements// include:\n\n<<<\n[[Refactored|https://github.com/Jermolene/TiddlyWiki5/pull/2027]] `$tw.utils.parseStringArray()` to optionally allow non-unique entries\n<<<\n\nThe link in the release note is to the github pull request that altered  <<.op \"$tw.utils.parseStringArray()\">> to optionally return list values that retain duplicate items.\n\nThe replacement filter operator provided by this plugin makes use of this undocumented optional behaviour of <<.op \"$tw.utils.parseStringArray()\">>.\n\n</div>\n\n; Shiraz plugin (suggested)\n: <div>\n\nThe configuration tiddler provided as part of this plugin is [[$:/config/plugin/.dtn/insert-table/style-sets]].\n\nThe configuration tiddler is not necessary for inserting tables but is provided as a potential method of grouping together commonly used sets for css styles. (See [[plugin usage|$:/plugins/.dtn/insert-table/usage]] for details.)\n\nThe example style set provided in the configuration tiddler uses css styles from the [[Shiraz plugin|https://kookma.github.io/Shiraz/#%24%3A%2Fplugins%2F.mr%2Fshiraz%20plugin]].\n\n</div>\n",
            "bag": "default",
            "revision": "0",
            "type": "text/vnd.tiddlywiki",
            "title": "$:/plugins/.dtn/insert-table/dependencies",
            "tags": "",
            "modified": "20190509124533453",
            "created": "20190428025154830"
        },
        "$:/plugins/.dtn/insert-table/enlist-operator.js": {
            "text": "/*\\\ntitle: $:/plugins/.dtn/insert-table/enlist-operator.js\ntype: application/javascript\nmodule-type: filteroperator\n\nFilter operator 'inserttableenlist' used by the 'insert-table' plugin that acts like the core operator 'enlist' except that it does not remove duplicate list items\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n/*\nExport our filter function\n*/\nexports.inserttableenlist = function(source,operator,options) {\n\tvar list = $tw.utils.parseStringArray(operator.operand,true);\n\tif(operator.prefix === \"!\") {\n\t\tvar results = [];\n\t\tsource(function(tiddler,title) {\n\t\t\tif(list.indexOf(title) === -1) {\n\t\t\t\tresults.push(title);\n\t\t\t}\n\t\t});\n\t\treturn results;\n\t} else {\n\t\treturn list;\n\t}\n};\n\n})();\n",
            "bag": "default",
            "revision": "0",
            "type": "application/javascript",
            "title": "$:/plugins/.dtn/insert-table/enlist-operator.js",
            "tags": "",
            "module-type": "filteroperator",
            "modified": "20190509120519679",
            "created": "20190509120519679"
        },
        "$:/plugins/.dtn/insert-table/license": {
            "text": "This plugin is distributed under the same license as Tiddlywiki, the [[3-Clause BSD License|https://opensource.org/licenses/BSD-3-Clause]] (also known as //BSD-3-Clause//, the //New BSD License//, and the //Modified BSD License//):\n\n---\n\nCopyright 2019 David Nebauer\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "bag": "default",
            "revision": "0",
            "type": "text/vnd.tiddlywiki",
            "title": "$:/plugins/.dtn/insert-table/license",
            "tags": "",
            "modified": "20190420145106286",
            "created": "20190420144028343"
        },
        "$:/plugins/.dtn/insert-table/macros": {
            "created": "20190317111849507",
            "text": "\\define insert-table(source classes sort-op:\"nsort[]\" align)\n<$vars source=\"$source$\" classes=\"$classes$\" sort-op=\"$sort-op$\" align=\"$align$\">\n<$set name=\"uuid-class\" value=<<__insert-table_uuid>> >\n<$set name=\"all-classes\" value=<<__insert-table_all-classes>> >\n<<__insert-table>>\n</$set>\n</$set>\n</$vars>\n\\end\n\\define __insert-table_all-classes()\n$(classes)$ $(uuid-class)$\n\\end\n\\define __insert-table()\n<!-- COLUMN ALIGNMENT (optional) -->\n<style>\n<$set filter=\"[inserttableenlist[$(align)$]count[]]\" name=\"alignCount\">\n<$list filter=\"[range<alignCount>]\" variable=\"alignIndex\">\n.$(uuid-class)$ tr th:nth-child(<<alignIndex>>) { text-align: <$text text={{{ [inserttableenlist[$(align)$]nth<alignIndex>] }}}/>; }\n.$(uuid-class)$ tr td:nth-child(<<alignIndex>>) { text-align: <$text text={{{ [inserttableenlist[$(align)$]nth<alignIndex>] }}}/>; }\n</$list>\n</$set>\n</style>\n<!-- STYLE CLASSES (optional) -->\n<table class=\"$(all-classes)$\">\n<!-- CAPTION (optional) -->\n<$list filter=\"[<source>get[table-caption]]\" variable=\"tableCaption\">\n<caption><$text text=<<tableCaption>>/></caption>\n</$list>\n<!-- HEADER ROW (optional) -->\n<$list filter=\"[<source>get[column-headings]]\" variable=\"headingsField\">\n<thead>\n<tr>\n<$list filter=\"[enlist<headingsField>]\" variable=\"heading\">\n<td><<heading>></td>\n</$list>\n</tr>\n</thead>\n</$list>\n<!-- DATA ROWS (required) -->\n<tbody>\n<$set name=\"filter\" value=\"[<source>indexes[]$(sort-op)$]\">\n<$list filter=<<filter>> variable=\"rowIndex\" emptyMessage=\"<tr><td>***NO TABLE DATA***</td></tr>\">\n<tr>\n<$set name=\"rowCells\" tiddler=<<source>> index=<<rowIndex>> >\n<$list filter=\"[inserttableenlist<rowCells>]\" variable=\"cell\" emptyMessage=\"<td>***NO ROW DATA***</td>\">\n<td><<cell>></td>\n</$list>\n</$set>\n</tr>\n</$list>\n</$set>\n</tbody>\n</table>\n\\end",
            "bag": "default",
            "revision": "0",
            "type": "text/vnd.tiddlywiki",
            "title": "$:/plugins/.dtn/insert-table/macros",
            "tags": "$:/tags/Macro",
            "modified": "20190514095852379"
        },
        "$:/plugins/.dtn/insert-table/readme": {
            "text": "The <<.def insert-table>> plugin provides a [[macro|Macros]] which inserts a table whose contents are sourced from a [[dictionary tiddler|DictionaryTiddlers]]. (See [[plugin usage|$:/plugins/.dtn/insert-table/usage]] for how to use this macro.)\n\n!! Table components and their source\n\nThe table contents are sourced as follows:\n\n; Caption\n\n* Sourced from dictionary tiddler field <<.field column-headings>>.\n* Optional -- omitted from table if field is not present or is empty.\n* The entire field content is used as the caption.\n\n; Column headings\n\n* Sourced from dictionary tiddler field <<.field table-caption>>.\n* Optional -- omitted from table if field is not present or is empty.\n* Space-delimited. If a value includes spaces enclose value in double square brackets.\n\n; Row data\n\n* Sourced from dictionary tiddler content, i.e., <<.field text>> field.\n* Required -- error message is printed if row data is missing.\n* Space-delimited. If a value includes spaces enclose value in double square brackets.\n\n!! Example source tiddler\n\nHere is an example dictionary tiddler which includes all supported table elements:\n\n```tid\ntable-caption: Food Colours\ncolumn-headings: [[Food Type]] Name Colour\ntype: application/x-tiddler-dictionary\n\n1:Fruit Orange Orange\n2:Fruit Apple [[Red, pink, or green]]\n3:Vegetable [[Spanish onion]] [[White or yellow]]\n```\n\nEmpty cells are indicated by `[[ ]]` -- the space ensures that css styling is applied to the cell.\n\n!! Table structure\n\nThe table is output as raw html.\n\nHeader cells are <<.field td>> elements rather than the more canonical <<.field th>> elements. This is a purely pragmatic decision to ensure tables created by this macro can be styled by the stylesheets provided by the [[Shiraz plugin|https://kookma.github.io/Shiraz/#%24%3A%2Fplugins%2F.mr%2Fshiraz plugin]]. This plugin will switch to outputting <<.field th>> headers cells when they are supported by Shiraz stylesheets.\n\n!! Styling\n\nTable styling is very deliberately separated from table content and is specified in the macro call. More specifically, the following can be specified in the macro call:\n\n* The css classes to apply to the table\n* The horizontal alignment of text in each table column\n* The sort order of table rows.\n\nBecause these styling parameters are independent of the dictionary tiddler containing the table data, it is possible to display the same data in multiple tables, each with with different styling. See [[plugin usage|$:/plugins/.dtn/insert-table/usage]] for further details.",
            "bag": "default",
            "revision": "0",
            "type": "text/vnd.tiddlywiki",
            "title": "$:/plugins/.dtn/insert-table/readme",
            "tags": "",
            "modified": "20190509125641936",
            "created": "20190420063746391"
        },
        "$:/plugins/.dtn/insert-table/usage": {
            "text": "This plugin provides the <<.def insert-table>> macro which inserts a table whose contents are sourced from a [[dictionary tiddler|DictionaryTiddlers]]. (See [[plugin readme|$:/plugins/.dtn/insert-table/readme]] for further details about the source tiddler and the resulting table output.)\n\n!! Parameters\n\n; source\n\n* Title of dictionary tiddler supplying table content.\n* Required.\n\n; classes\n\n* Space-delimited list of css classes to use in styling the table.\n* Optional. No default value.\n* Plugin provides a config tiddler that can be used with this parameter (see 'Config tiddler' below).\n\n; sort-op\n\n* Sort operator to use for ordering data rows. Is applied to row indexes.\n* Optional. Default: [[nsort[]|nsort Operator]]. (It assumes integer row indexes.)\n* Other potential values: [[sort[]|sort Operator]], [[sortan[]|sortan Operator]], [[sortcs[]|sortcs Operator]], and [[nsortcs[]|nsortcs Operator]].\n* All sort operators can be prepended by <<.param !>> to reverse their normal order.\n* It is not possible to display data rows in the same order they appear in the source dictionary tiddler. This is because the macro uses the [[indexes[]|indexes Operator]] operator for which, according to its documentation, \"The list of property names is retrieved from the data tiddler (in no particular order)\".\n\n; align\n\n* Horizontal alignment of cell text, defined per column.\n* Optional – omitted from table if field is not present or is empty.\n* Space-delimited list of column alignments; first term = alignment of first column, second term = alignment of second column, etc. Thus, if a user wants to specify the alignment of the third column they will have to specify the alignment of the first and second columns as well.\n* Values that can be used for column alignment are any valid values for the css property <<.param text-align>>. Useful values are //left//, //right//, //center//, and //justify//. (The other valid values are //initial// and //inherit//, neither of which are useful in this context.)\n** Since these values are all single word terms there is no need to enclose them in double square brackets.\n\n!! Config tiddler\n\nAs described in the [[plugin readme|$:/plugins/.dtn/insert-table/readme]], table styling is very deliberately separated from table content. Rather than being defined in the source dictionary tiddler, the css classes to apply to a table are specified in the macro call that inserts the table.\n\nThis plugin provides a configuration tiddler which can be used to define commonly-used sets of css classes for use with the <<.param classes>> parameter. This configuration tiddler is [[$:/config/plugin/.dtn/insert-table/style-sets]]. The intention is that fields can be created for it that each contain a set of space-separated css classes.\n\nThe default version of this tiddler contains a single example field called <<.field borderless-orange>> which contains the following set of css classes: <<.param \"table-borderless table-striped-row thead-orange caption-top\">>. (These css classes are provided by the [[Shiraz plugin|https://kookma.github.io/Shiraz/#%24%3A%2Fplugins%2F.mr%2Fshiraz plugin]].) The user can edit this field and add additional fields with other sets of css classes.\n\n!! Example macro call\n\n```tid\n<$macrocall $name=\"insert-table\"\n            source=\"MyTableData\"\n            classes={{$:/config/plugin/.dtn/insert-table/style-sets!!borderless-orange}}\n            sort-op=\"!nsort[]\"\n            align=\"left right center justify\"/>\n```",
            "bag": "default",
            "revision": "0",
            "type": "text/vnd.tiddlywiki",
            "title": "$:/plugins/.dtn/insert-table/usage",
            "tags": "",
            "modified": "20190509122003068",
            "created": "20190420071759697"
        },
        "$:/plugins/.dtn/insert-table/uuid-macro.js": {
            "text": "/*\\\ntitle: $:/plugins/.dtn/insert-table/uuid.js\ntype: application/javascript\nmodule-type: macro\n\n<<__insert-table_uuid>>\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n/*\nInformation about this macro\n\nuuid.js - Version 0.3\nJavaScript Class to create a UUID like identifier\nCopyright (C) 2006-2008, Erik Giberti (AF-Design), All rights reserved.\nThis program is free software; you can redistribute it and/or modify it under\nthe terms of the GNU General Public License as published by the Free Software\nFoundation; either version 2 of the License, or (at your option) any later\nversion.\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY\nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\nPARTICULAR PURPOSE. See the GNU General Public License for more details.\nYou should have received a copy of the GNU General Public License along with\nthis program; if not, write to the Free Software Foundation, Inc., 59 Temple\nPlace, Suite 330, Boston, MA 02111-1307 USA\nThe latest version of this file can be downloaded from\nhttp://www.af-design.com/resources/javascript_uuid.php\nHISTORY:\n6/5/06 \t- Initial Release\n5/22/08 - Updated code to run faster, removed randrange(min,max) in favor of\n\t\t  a simpler rand(max) function. Reduced overhead by using getTime()\n\t\t  method of date class (suggestion by James Hall).\n9/5/08\t- Fixed a bug with rand(max) and additional efficiencies pointed out\n\t  by Robert Kieffer http://broofa.com/\nKNOWN ISSUES:\n- Still no way to get MAC address in JavaScript\n- Research into other versions of UUID show promising possibilities\n  (more research needed)\n- Documentation needs improvement\n*/\n// On creation of a UUID object, set it's initial value\nfunction UUID(){\n\tthis.id = this.createUUID();\n}\n// When asked what this Object is, lie and return it's value\nUUID.prototype.valueOf = function(){ return this.id; }\nUUID.prototype.toString = function(){ return this.id; }\n//\n// INSTANCE SPECIFIC METHODS\n//\nUUID.prototype.createUUID = function(){\n\t//\n\t// Loose interpretation of the specification DCE 1.1: Remote Procedure Call\n\t// described at http://www.opengroup.org/onlinepubs/009629399/apdxa.htm#tagtcjh_37\n\t// since JavaScript doesn't allow access to internal systems, the last 48 bits\n\t// of the node section is made up using a series of random numbers (6 octets long).\n\t//\n\tvar dg = new Date(1582, 10, 15, 0, 0, 0, 0);\n\tvar dc = new Date();\n\tvar t = dc.getTime() - dg.getTime();\n\tvar h = '-';\n\tvar tl = UUID.getIntegerBits(t,0,31);\n\tvar tm = UUID.getIntegerBits(t,32,47);\n\tvar thv = UUID.getIntegerBits(t,48,59) + '1'; // version 1, security version is 2\n\tvar csar = UUID.getIntegerBits(UUID.rand(4095),0,7);\n\tvar csl = UUID.getIntegerBits(UUID.rand(4095),0,7);\n\t// since detection of anything about the machine/browser is far to buggy,\n\t// include some more random numbers here\n\t// if NIC or an IP can be obtained reliably, that should be put in\n\t// here instead.\n\tvar n = UUID.getIntegerBits(UUID.rand(8191),0,7) +\n\t\t\tUUID.getIntegerBits(UUID.rand(8191),8,15) +\n\t\t\tUUID.getIntegerBits(UUID.rand(8191),0,7) +\n\t\t\tUUID.getIntegerBits(UUID.rand(8191),8,15) +\n\t\t\tUUID.getIntegerBits(UUID.rand(8191),0,15); // this last number is two octets long\n\treturn tl + h + tm + h + thv + h + csar + csl + h + n;\n}\n//\n// GENERAL METHODS (Not instance specific)\n//\n// Pull out only certain bits from a very large integer, used to get the time\n// code information for the first part of a UUID. Will return zero's if there\n// aren't enough bits to shift where it needs to.\nUUID.getIntegerBits = function(val,start,end){\n\tvar base16 = UUID.returnBase(val,16);\n\tvar quadArray = new Array();\n\tvar quadString = '';\n\tvar i = 0;\n\tfor(i=0;i<base16.length;i++){\n\t\tquadArray.push(base16.substring(i,i+1));\n\t}\n\tfor(i=Math.floor(start/4);i<=Math.floor(end/4);i++){\n\t\tif(!quadArray[i] || quadArray[i] == '') quadString += '0';\n\t\telse quadString += quadArray[i];\n\t}\n\treturn quadString;\n}\n// Replaced from the original function to leverage the built in methods in\n// JavaScript. Thanks to Robert Kieffer for pointing this one out\nUUID.returnBase = function(number, base){\n\treturn (number).toString(base).toUpperCase();\n}\n// pick a random number within a range of numbers\n// int b rand(int a); where 0 <= b <= a\nUUID.rand = function(max){\n\treturn Math.floor(Math.random() * (max + 1));\n}\n// end of UUID class file\n\n\nexports.name = \"__insert-table_uuid\";\n\nexports.params = [];\n\nexports.run = function() {\n\tvar uuid= new UUID();\n\treturn uuid.toString();\n};\n\n})();\n",
            "bag": "default",
            "revision": "0",
            "type": "application/javascript",
            "title": "$:/plugins/.dtn/insert-table/uuid-macro.js",
            "tags": "$:/tags/Macro",
            "module-type": "macro",
            "modified": "20190509120340056",
            "created": "20190509103407751"
        }
    }
}