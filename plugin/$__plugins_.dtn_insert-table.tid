author: David Nebauer
core-version: >=5.1.18
created: 20190428105543376
dependents: enlist-allow-duplicates
description: Insert table defined in data tiddler
list: readme usage dependency license
modified: 20190428105543376
plugin-type: plugin
title: $:/plugins/.dtn/insert-table
type: application/json
version: 0.0.1

{
    "tiddlers": {
        "$:/plugins/.dtn/insert-table/dependency": {
            "text": "!! Non-core operator: <<.op enlistallowduplicates>>\n\nThis plugin relies on a non-core filter operator called <<.op enlistallowduplicates>>, provided by a non-core plugin called <<.field enlist-allow-duplicates>>.\n\nThe <<.op enlistallowduplicates>> operator is a direct analogue of the [[enlist|enlist Operator]] operator, which breaks apart a string into a list of values. As might be guessed from its name, <<.op enlistallowduplicates>> preserves duplicate values in the list while <<.op enlist>> deletes duplicate values, returning a list of unique values.\n\nThe <<.op enlistallowduplicates>> is required for the <<.field insert-table>> macro to handle table rows and column alignment specifications with duplicate values.\n\nThe <<.field enlist-allow-duplicates>> plugin is provided by the same author as this plugin, and should be available from the same source as this plugin.",
            "bag": "default",
            "revision": "0",
            "type": "text/vnd.tiddlywiki",
            "title": "$:/plugins/.dtn/insert-table/dependency",
            "tags": "",
            "modified": "20190428030545478",
            "created": "20190428025154830"
        },
        "$:/plugins/.dtn/insert-table/license": {
            "text": "This plugin is distributed under the same license as Tiddlywiki, the [[3-Clause BSD License|https://opensource.org/licenses/BSD-3-Clause]] (also known as //BSD-3-Clause//, the //New BSD License//, and the //Modified BSD License//):\n\n---\n\nCopyright 2019 David Nebauer\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "bag": "default",
            "revision": "0",
            "type": "text/vnd.tiddlywiki",
            "title": "$:/plugins/.dtn/insert-table/license",
            "tags": "",
            "modified": "20190420145106286",
            "created": "20190420144028343"
        },
        "$:/plugins/.dtn/insert-table/macros": {
            "text": "\\define insert-table(source classes sort-op:\"nsort[]\" align)\n<$vars source=\"$source$\" classes=\"$classes$\" sort-op=\"$sort-op$\" align=\"$align$\">\n<<__insert-table>>\n</$vars>\n\\end\n\\define __all-row-sizes()\n<$list filter=\"[<source>indexes[]nsort[]]\" variable=\"rowIndex\">\n<$set name=\"rowCells\" tiddler=<<source>> index=<<rowIndex>> >\n{{{ [enlistallowduplicates<rowCells>count[]] }}}\n</$set>\n</$list>\n\\end\n\\define __max-row-size()\n<$wikify name=\"all-row-sizes\" text=<<__all-row-sizes>> output=\"text\">\n{{{ [enlist<all-row-sizes>nsort[]last[]] }}}\n</$wikify>\n\\end\n\\define __source-column-align()\n<$transclude tiddler=\"$(source)$\" field=\"column-align\" mode=\"inline\"/>\n\\end\n\\define __insert-table()\n<!-- COLUMN ALIGNMENT (optional) -->\n<!-- 1: default all columns to left alignment,\n        to override any previous table styling in tiddler -->\n<style>\n<$wikify name=\"max-row-size\" text=<<__max-row-size>> output=\"text\">\n<$list filter=\"[range<max-row-size>]\" variable=\"colIndex\">\ntr td:nth-child(<<colIndex>>) { text-align: left; }\n</$list>\n</$wikify>\n</style>\n<!-- 2: from source tiddler (optional) -->\n<!--\nwikify rather than set the variable 'source-column-align' to force immediate evaluation,\notherwise its use within the triple curly braces results in the transclude widget from\nthe '__source-column-align' macro being passed to the enlistallowduplicates operator as\nplain text, causing a train wreck; this is presumably due to some form of 'lazy'\nevaluation\n-->\n<style>\n<$wikify name=\"source-column-align\" text=<<__source-column-align>> output=\"text\">\n<$set filter=\"[enlistallowduplicates<source-column-align>count[]]\" name=\"alignCount\">\n<$list filter=\"[range<alignCount>]\" variable=\"alignIndex\">\ntr td:nth-child(<<alignIndex>>) { text-align: <$text text={{{ [enlistallowduplicates<source-column-align>nth<alignIndex>] }}}/>; }\n</$list>\n</$set>\n</$wikify>\n</style>\n<!-- 3: from macro call (optional, overrides source tiddler) -->\n<style>\n<$set filter=\"[enlistallowduplicates[$(align)$]count[]]\" name=\"alignCount\">\n<$list filter=\"[range<alignCount>]\" variable=\"alignIndex\">\ntr td:nth-child(<<alignIndex>>) { text-align: <$text text={{{ [enlistallowduplicates[$(align)$]nth<alignIndex>] }}}/>; }\n</$list>\n</$set>\n</style>\n<!-- STYLE CLASSES (optional) -->\n<table class=\"$(classes)$\">\n<!-- CAPTION (optional) -->\n<$list filter=\"[<source>get[table-caption]]\" variable=\"tableCaption\">\n<caption><$text text=<<tableCaption>>/></caption>\n</$list>\n<!-- HEADER ROW (optional) -->\n<$list filter=\"[<source>get[column-headings]]\" variable=\"headingsField\">\n<thead>\n<tr>\n<$list filter=\"[enlist<headingsField>]\" variable=\"heading\">\n<td><$text text=<<heading>>/></td>\n</$list>\n</tr>\n</thead>\n</$list>\n<!-- DATA ROWS (required) -->\n<tbody>\n<$set name=\"filter\" value=\"[<source>indexes[]$(sort-op)$]\">\n<$list filter=<<filter>> variable=\"rowIndex\" emptyMessage=\"<tr><td>***NO TABLE DATA***</td></tr>\">\n<tr>\n<$set name=\"rowCells\" tiddler=<<source>> index=<<rowIndex>> >\n<$list filter=\"[enlistallowduplicates<rowCells>]\" variable=\"cell\" emptyMessage=\"<td>***NO ROW DATA***</td>\">\n<td><<cell>></td>\n</$list>\n</$set>\n</tr>\n</$list>\n</$set>\n</tbody>\n</table>\n\\end",
            "bag": "default",
            "revision": "2",
            "type": "text/vnd.tiddlywiki",
            "title": "$:/plugins/.dtn/insert-table/macros",
            "tags": "$:/tags/Macro",
            "modified": "20190428065653512",
            "created": "20190317111849507"
        },
        "$:/plugins/.dtn/insert-table/readme": {
            "text": "The <<.def insert-table>> plugin provides a [[macro|Macros]] which inserts a table whose contents are sourced from a [[dictionary tiddler|DictionaryTiddlers]]. (See [[plugin usage|$:/plugins/.dtn/insert-table/usage]] for how to use this macro.)\n\n!! Table components and their source\n\nThe table contents are sourced as follows:\n\n; Caption\n\n* Sourced from dictionary tiddler field <<.field column-headings>>.\n* Optional -- omitted from table if field is not present or is empty.\n* The entire field content is used as the caption.\n\n; Column headings\n\n* Sourced from dictionary tiddler field <<.field table-caption>>.\n* Optional -- omitted from table if field is not present or is empty.\n* Space-delimited. If a value includes spaces enclose value in double square brackets.\n\n; Column alignment\n\n* Sourced from dictionary tiddler <<.field column-align>>.\n* Optional -- omitted from table if field is not present or is empty.\n* Space-delimited list of column alignments; first term = alignment of first column, second term = alignment of second column, etc. Thus, if a user wants to specify the alignment of the third column they will have to specify the alignment of the first and second columns as well.\n* Values that can be used for column alignment are any valid values for the css property <<.param text-align>>. Useful values are //left//, //right//, //center//, and //justify//. (The other valid values are //initial// and //inherit//, neither of which are useful in this context.)\n**Since these values are all single word terms there is no need to enclose them in double square brackets.\n\n; Row data\n\n* Sourced from dictionary tiddler content, i.e., <<.field text>> field.\n* Required -- error message is printed if row data is missing.\n* Space-delimited. If a value includes spaces enclose value in double square brackets.\n\n!! Example source tiddler\n\nHere is an example dictionary tiddler which includes all supported table elements:\n\n```tid\ntable-caption: Food Colours\ncolumn-headings: [[Food Type]] Name Colour\ntype: application/x-tiddler-dictionary\n\n1:Fruit Orange Orange\n2:Fruit Apple [[Red, pink, or green]]\n3:Vegetable [[Spanish onion]] [[White or yellow]]\n```\n\nEmpty cells are indicated by `[[ ]]` -- the space ensures that css styling is applied to the cell.\n\n!! Table structure\n\nThe table is output as raw html.\n\nHeader cells are <<.field td>> elements rather than the more canonical <<.field th>> elements. This is a purely pragmatic decision to ensure tables created by this macro can be styled by the stylesheets provided by the [[Shiraz plugin|https://kookma.github.io/Shiraz/#%24%3A%2Fplugins%2F.mr%2Fshiraz plugin]]. This plugin will switch to outputting <<.field th>> headers cells when they are supported by Shiraz stylesheets.\n\n!! Styling with CSS\n\nTable css styling is very deliberately separated from table content. The css classes to apply to a table are specified in the macro call that inserts the table, and not in the dictionary tiddler containing the table data. This enables the same data to be displayed in different tables with different styling, and even a different sort order. See [[plugin usage|$:/plugins/.dtn/insert-table/usage]] for further details.\n\n!! Column alignment\n\nColumn alignment can be specified in two places:\n\n* In the <<.field column-align>> field of the source dictionary tiddler as described above\n* In the macro call that inserts the table -- this overrides any setting in the source dictionary tiddler (see [[plugin usage|$:/plugins/.dtn/insert-table/usage]] for further details).\n\nColumn alignment is set by three style elements inserted before the table:\n\n* The first style element sets all columns to left text alignment by default\n* The second style element sets column alignments according to settings in the source dictionary tiddler, if any\n* The third style element sets column alignments according to the macro call, if any.\n\nLater style elements overwrite earlier settings. The first style element ensures that any style settings for tables do not affect subsequent tables in the same tiddler. ",
            "bag": "default",
            "revision": "1",
            "type": "text/vnd.tiddlywiki",
            "title": "$:/plugins/.dtn/insert-table/readme",
            "tags": "",
            "modified": "20190428063137459",
            "created": "20190420063746391"
        },
        "$:/plugins/.dtn/insert-table/usage": {
            "text": "This plugin provides the <<.def insert-table>> which inserts a table whose contents are sourced from a [[dictionary tiddler|DictionaryTiddlers]]. (See [[plugin readme|$:/plugins/.dtn/insert-table/readme]] for further details about the source tiddler and the resulting table output.)\n\n!! Parameters\n\n; source\n\n* Title of dictionary tiddler supplying table content.\n* Required.\n\n; classes\n\n* Space-delimited list of css classes to use in styling the table.\n* Optional. No default value.\n* Plugin provides a config tiddler that can be used with this parameter (see 'Config tiddler' below).\n\n; sort-op\n\n* Sort operator to use for ordering data rows. Is applied to row indexes.\n* Optional. Default: [[nsort[]|nsort Operator]]. (It assumes integer row indexes.)\n* Other potential values: [[sort[]|sort Operator]], [[sortan[]|sortan Operator]], [[sortcs[]|sortcs Operator]], and [[nsortcs[]|nsortcs Operator]].\n* All sort operators can be prepended by <<.param !>> to reverse their normal order.\n* It is not possible to display data rows in the same order they appear in the source dictionary tiddler. This is because the macro uses the [[indexes[]|indexes Operator]] operator for which, according to its documentation, \"The list of property names is retrieved from the data tiddler (in no particular order)\".\n\n; align\n\n* Horizontal alignment of cell text, defined per column.\n* Optional – omitted from table if field is not present or is empty.\n* Space-delimited list of column alignments; first term = alignment of first column, second term = alignment of second column, etc. Thus, if a user wants to specify the alignment of the third column they will have to specify the alignment of the first and second columns as well.\n* Values that can be used for column alignment are any valid values for the css property <<.param text-align>>. Useful values are //left//, //right//, //center//, and //justify//. (The other valid values are //initial// and //inherit//, neither of which are useful in this context.)\n**Since these values are all single word terms there is no need to enclose them in double square brackets.\n\n!! Config tiddler\n\nAs described in the [[plugin readme|$:/plugins/.dtn/insert-table/readme]], table styling is very deliberately separated from table content. Rather than being defined in the source dictionary tiddler, the css classes to apply to a table are specified in the macro call that inserts the table.\n\nThis plugin provides a configuration tiddler which can be used to define commonly-used sets of css classes for use with the <<.param classes>> parameter. This configuration tiddler is [[$:/config/plugin/.dtn/insert-table/style-sets]]. The intention is that fields can be created for it that each contain a set of space-separated css classes.\n\nThe default version of this tiddler contains a single example field called <<.field borderless-orange>> which contains the following set of css classes: <<.param \"table-borderless table-striped-row thead-orange caption-top\">>. (These css classes are provided by the [[Shiraz plugin|https://kookma.github.io/Shiraz/#%24%3A%2Fplugins%2F.mr%2Fshiraz plugin]].) The user can edit this field and add additional fields with other sets of css classes.\n\n!! Example macro call\n\n```tid\n<$macrocall $name=\"insert-table\"\n            source=\"MyTableData\"\n            classes={{$:/config/plugin/.dtn/insert-table/style-sets!!borderless-orange}}\n            sort-op=\"!nsort[]\"\n            align=\"left right center justify\"/>\n```\n\n!! Column alignment\n\nThe [[plugin readme|$:/plugins/.dtn/insert-table/readme]] describes how sequential column alignment styles are applied:\n\n* First, all columns are set to default left alignment\n* Second, any alignments specified in the source tiddler's <<.field column-align>> field\n* Finally, any alignments specified in the macro's <<.param align>> parameter\n\nLater styles overwrite earlier styles, thus the macro's <<.param align>> parameter will override the source tiddler's <<.field column-align>> field.\n\nThe [[plugin readme|$:/plugins/.dtn/insert-table/readme]] describes a deliberate decision to separate css styling from table content, by specifying it through the table insertion macro call rather than the source data tiddler. Column alignment, by contrast, can be defined in both the table data tiddler and table insertion macro call, because column alignment can have //semantic meaning// as well being simply for styling. For example, right-aligning a currency column, i.e., numbers with two decimal places, ensures that digits of the same order of magnitude occur in the same horizontal position. This helps convey semantic meaning and might appropriately be defined in the source data tiddler. On the other hand, right-aligning a column to move its contents up to the following column simply to improve aesthetic appearance or readability, such as if date and time columns are adjacent, might appropriately be defined in the table insertion macro call.",
            "bag": "default",
            "revision": "2",
            "type": "text/vnd.tiddlywiki",
            "title": "$:/plugins/.dtn/insert-table/usage",
            "tags": "",
            "modified": "20190428063318567",
            "created": "20190420071759697"
        }
    }
}